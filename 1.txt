<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Estimations - Page 3</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .small-muted { font-size: 0.9rem; color: #666; }
    table tbody tr td { vertical-align: middle; }
  </style>
</head>
<body class="bg-light">
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary shadow">
    <div class="container-fluid">
      <a class="navbar-brand fw-bold" href="#">Alliance Marine</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto">
          <li class="nav-item"><a class="nav-link" href="{{ url_for('dashboard') }}">Dashboard</a></li>
          <li class="nav-item"><a class="nav-link active" href="{{ url_for('estimation') }}">Estimation</a></li>
        </ul>
        <span class="navbar-text me-3">Welcome, {{ username }}</span>
        <a href="{{ url_for('logout') }}" class="btn btn-outline-light">Logout</a>
      </div>
    </div>
  </nav>

  <div class="container mt-4">
    <div class="card shadow p-4 mb-4">
      <h4 class="text-primary">Repair Estimation Entries</h4>
      <p class="small-muted">
        Container: <strong>{{ container.container_no }}</strong> | 
        In Date: {{ container.in_date }} | 
        Size: {{ container.size }}
      </p>

      <!-- Form -->
      <form id="entryForm" class="row g-3">
        <div class="col-md-4">
          <label class="form-label">Category</label>
          <select id="category" class="form-select" required>
            <option value="">-- Select Category --</option>
            {% for c in categories %}
              <option value="{{ c }}">{{ c }}</option>
            {% endfor %}
          </select>
        </div>

        <div class="col-md-4">
          <label class="form-label">Description</label>
          <select id="description" class="form-select" disabled required>
            <option value="">-- Select Description --</option>
          </select>
        </div>

        <div class="col-md-4" id="dimensionWrapper" style="display:none;">
          <label class="form-label" id="dimensionLabel">Dimension</label>
          <select id="dimensionSelect" class="form-select" style="display:none;"></select>
          <input type="number" step="0.01" id="dimensionInput" class="form-control" style="display:none;" />
        </div>

        <div class="col-md-3">
          <label class="form-label">MAT.COST</label>
          <input type="text" id="matCost" class="form-control" readonly>
        </div>

        <div class="col-md-3">
          <label class="form-label">MAN.HRS</label>
          <input type="number" step="0.01" id="manHrs" class="form-control" min="0" required>
        </div>

        <div class="col-md-3">
          <label class="form-label">LAB.COST</label>
          <input type="text" id="labCost" class="form-control" readonly>
        </div>

        <div class="col-md-3 d-flex align-items-end">
          <button type="button" id="addEntryBtn" class="btn btn-success w-100">Add entry</button>
        </div>
      </form>
    </div>

    <!-- Entries table -->
    <div class="card shadow p-3 mb-4">
      <h5>Entries</h5>
      <div class="table-responsive">
        <table class="table table-bordered" id="entriesTable">
          <thead class="table-light">
            <tr>
              <th>#</th>
              <th>Category</th>
              <th>Description</th>
              <th>Dimension</th>
              <th>MAT.COST</th>
              <th>MAN.HRS</th>
              <th>LAB.COST</th>
              <th>TOTAL</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody></tbody>
          <tfoot>
            <tr>
              <td colspan="7" class="text-end fw-bold">Grand Total</td>
              <td id="grandTotal">0.00</td>
              <td></td>
            </tr>
          </tfoot>
        </table>
      </div>

      <div class="d-flex gap-2">
        <button id="exportExcel" class="btn btn-outline-primary">Export Excel</button>
        <button id="exportPDF" class="btn btn-outline-secondary">Export PDF</button>
        <a href="{{ url_for('estimation') }}" class="btn btn-warning">← Back</a>
      </div>
    </div>
  </div>

  <!-- Toast container -->
  <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 9999">
    <div id="toastContainer"></div>
  </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
  function showToast(msg, type="danger") {
    const toastId = "toast-" + Date.now();
    const html = `
      <div id="${toastId}" class="toast align-items-center text-white bg-${type} border-0 mb-2" role="alert">
        <div class="d-flex">
          <div class="toast-body">${msg}</div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
      </div>`;
    document.getElementById("toastContainer").insertAdjacentHTML("beforeend", html);
    new bootstrap.Toast(document.getElementById(toastId), { delay: 3000 }).show();
  }

  const descriptionsSelect = document.getElementById('description');
  const categorySelect = document.getElementById('category');
  const dimensionWrapper = document.getElementById('dimensionWrapper');
  const dimensionSelect = document.getElementById('dimensionSelect');
  const dimensionInput = document.getElementById('dimensionInput');
  const dimensionLabel = document.getElementById('dimensionLabel');
  const matCostField = document.getElementById('matCost');
  const manHrsField = document.getElementById('manHrs');
  const labCostField = document.getElementById('labCost');
  const addEntryBtn = document.getElementById('addEntryBtn');
  const entriesTableBody = document.querySelector('#entriesTable tbody');
  const grandTotalEl = document.getElementById('grandTotal');

  let entries = [];

  // fetch descriptions for selected category
  categorySelect.addEventListener('change', async () => {
    const cat = categorySelect.value;
    descriptionsSelect.innerHTML = '<option value="">-- Select Description --</option>';
    matCostField.value = '';
    hideDimension();
    if (!cat) {
      descriptionsSelect.disabled = true;
      return;
    }
    descriptionsSelect.disabled = false;
    const resp = await fetch(`/api/descriptions?category=${encodeURIComponent(cat)}`);
    const data = await resp.json();
    data.forEach(item => {
      const opt = document.createElement('option');
      opt.value = item.description;
      opt.textContent = item.description; // ✅ show text
      opt.dataset.hasDimensions = item.has_dimensions;
      opt.dataset.dimensions = JSON.stringify(item.dimensions || []);
      descriptionsSelect.appendChild(opt);
    });
  });

  descriptionsSelect.addEventListener('change', async () => {
    matCostField.value = '';
    hideDimension();
    const cat = categorySelect.value;
    const desc = descriptionsSelect.value;
    if (!desc) return;

    const opt = descriptionsSelect.selectedOptions[0];
    const hasDimensions = (opt.dataset.hasDimensions === 'true');
    const dims = JSON.parse(opt.dataset.dimensions || '[]');

    if (hasDimensions && dims.length > 0) {
      showDimensionSelect(dims);
    } else if (desc.toUpperCase().startsWith("EVERY ADDITIONAL")) {
      showDimensionInput("Units (number)");
    } else {
      const resp = await fetch(`/api/matcost?category=${encodeURIComponent(cat)}&description=${encodeURIComponent(desc)}`);
      const json = await resp.json();
      matCostField.value = json.mat_cost.toFixed(2);
    }
  });

  function showDimensionSelect(dims) {
    dimensionWrapper.style.display = '';
    dimensionSelect.style.display = '';
    dimensionInput.style.display = 'none';
    dimensionSelect.innerHTML = '<option value="">-- Select Dimension --</option>';
    dims.forEach(d => {
      const o = document.createElement('option'); o.value = d; o.text = d;
      dimensionSelect.appendChild(o);
    });
  }

  function showDimensionInput(label) {
    dimensionWrapper.style.display = '';
    dimensionInput.style.display = '';
    dimensionInput.value = '';
    dimensionSelect.style.display = 'none';
    dimensionLabel.textContent = label;
  }

  function hideDimension() {
    dimensionWrapper.style.display = 'none';
    dimensionSelect.style.display = 'none';
    dimensionInput.style.display = 'none';
    dimensionSelect.innerHTML = '';
    dimensionInput.value = '';
    dimensionLabel.textContent = 'Dimension';
  }

  dimensionSelect.addEventListener('change', async () => {
    const cat = categorySelect.value;
    const desc = descriptionsSelect.value;
    const dim = dimensionSelect.value;
    if (!dim) { matCostField.value = ''; return; }
    const resp = await fetch(`/api/matcost?category=${encodeURIComponent(cat)}&description=${encodeURIComponent(desc)}&dimension=${encodeURIComponent(dim)}`);
    const json = await resp.json();
    matCostField.value = parseFloat(json.mat_cost).toFixed(2);
  });

  dimensionInput.addEventListener('input', async () => {
    const cat = categorySelect.value;
    const desc = descriptionsSelect.value;
    const dimVal = dimensionInput.value;
    if (!dimVal) { matCostField.value = ''; return; }
    const resp = await fetch(`/api/matcost?category=${encodeURIComponent(cat)}&description=${encodeURIComponent(desc)}&dimension=${encodeURIComponent(dimVal)}`);
    const json = await resp.json();
    matCostField.value = parseFloat(json.mat_cost).toFixed(2);
  });

  manHrsField.addEventListener('input', () => {
    const hrs = parseFloat(manHrsField.value || 0);
    if (isNaN(hrs)) { labCostField.value = ''; return; }
    const lab = hrs * 75; // ✅ allow decimals
    labCostField.value = lab.toFixed(2);
  });

  addEntryBtn.addEventListener('click', () => {
    const category = categorySelect.value;
    const description = descriptionsSelect.value;
    let dimension = '';
    if (dimensionSelect.style.display !== 'none') dimension = dimensionSelect.value;
    if (dimensionInput.style.display !== 'none') dimension = dimensionInput.value;
    const matCost = parseFloat(matCostField.value || 0);
    const manHrs = parseFloat(manHrsField.value || 0);

    if (!category) return showToast('Select a Category');
    if (!description) return showToast('Select a Description');
    const opt = descriptionsSelect.selectedOptions[0];
    const hasDimensions = (opt && opt.dataset.hasDimensions === 'true');
    if (hasDimensions && !dimension) return showToast('Select a Dimension');
    if (description.toUpperCase().startsWith("EVERY ADDITIONAL") && (!dimension || isNaN(Number(dimension)))) {
      return showToast('Enter a numeric value for the additional units');
    }
    if (isNaN(manHrs) || manHrs <= 0) {
      return showToast('Enter MAN.HRS as a positive number');
    }

    const labCost = manHrs * 75;
    const total = matCost + labCost;
    const entry = {
      category, description, dimension,
      mat_cost: parseFloat(matCost.toFixed(2)),
      man_hrs: parseFloat(manHrs.toFixed(2)),
      lab_cost: parseFloat(labCost.toFixed(2)),
      total: parseFloat(total.toFixed(2))
    };
    entries.push(entry);
    renderEntries();
    matCostField.value = '';
    manHrsField.value = '';
    labCostField.value = '';
    hideDimension();
    descriptionsSelect.innerHTML = '<option value="">-- Select Description --</option>';
    categorySelect.value = '';
  });

  function renderEntries() {
    entriesTableBody.innerHTML = '';
    let grand = 0;
    entries.forEach((e, idx) => {
      grand += e.total;
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${idx+1}</td>
        <td>${e.category}</td>
        <td>${e.description}</td>
        <td>${e.dimension}</td>
        <td style="text-align:right">${e.mat_cost.toFixed(2)}</td>
        <td style="text-align:center">${e.man_hrs}</td>
        <td style="text-align:right">${e.lab_cost.toFixed(2)}</td>
        <td style="text-align:right">${e.total.toFixed(2)}</td>
        <td style="text-align:center"><button class="btn btn-sm btn-danger btn-delete" data-idx="${idx}">Delete</button></td>
      `;
      entriesTableBody.appendChild(tr);
    });
    grandTotalEl.textContent = grand.toFixed(2);
    document.querySelectorAll('.btn-delete').forEach(btn => {
      btn.addEventListener('click', (ev) => {
        const i = Number(ev.currentTarget.dataset.idx);
        entries.splice(i, 1);
        renderEntries();
      });
    });
  }

  document.getElementById('exportExcel').addEventListener('click', async () => {
    if (entries.length === 0) return showToast('Add at least one entry before exporting');
    const resp = await fetch('/export_excel', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify(entries)
    });
    if (!resp.ok) {
      const text = await resp.text();
      return showToast('Export failed: ' + text);
    }
    const blob = await resp.blob();
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'estimations.xlsx';
    document.body.appendChild(a); a.click(); a.remove();
    URL.revokeObjectURL(url);
  });

  document.getElementById('exportPDF').addEventListener('click', async () => {
    if (entries.length === 0) return showToast('Add at least one entry before exporting');
    const resp = await fetch('/export_pdf', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify(entries)
    });
    if (!resp.ok) {
      const text = await resp.text();
      return showToast('Export failed: ' + text);
    }
    const blob = await resp.blob();
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'estimations.pdf';
    document.body.appendChild(a); a.click(); a.remove();
    URL.revokeObjectURL(url);
  });
</script>
</body>
</html>
